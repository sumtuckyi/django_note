Database 
: 체계적인 데이터 모음

data 
: 저장이나 처리에 효율적인 형태로 변환된 정보

기존의 데이터 저장 방식
: 파일 이용 / 스프레드 시트 이용
- 파일은 어디에서나 쉽게 사용이 가능하지만 데이터를 구조적으로 관리하기가 어렵다. 
- 스프레드 시트는 테이블의 열과 행을 이용해 데이터를 구조적으로 관리 가능하지만 크기와 보안에 있어 한계가 존재
(일반적으로 약 100만 행까지만 저장이 가능하고, 단순히 파일이나 링크 소유 여부에 따른 단순한 접근 권한 기능 제공)
+ 정확성의 한계(일부 값의 변경으로 인해 테이블 모든 위치에서 해당 값을 업데이트 해야 함)

데이터베이스의 역할
데이터를 ★저장★하고 조작(CRUD)하기 위함 -> 구조적 저장을 어떻게 가능하게 하는가?

relational database
: 데이터 간에 관계가 있는 데이터 항목들의 모음
-테이블, 행, 열의 정보를 구조화
-"서로 관련된 데이터 포인터를 저장하고 이에 대한 액세스를 제공"
ex) 테이블(주문)의 외래키(고객 아이디)로 다른 테이블(고객)의 행에 접근이 가능하다. 
행에 접근하여 해당 행의 다른 속성(이름, 주소지 등)에 접근이 가능하다. 

관계 : 여러 테이블 간의 논리적 연결

테이블의 각 행을 어떻게 구분할 수 있을까..? -> unique한 ★기본키(pk)★를 두어 구분
두 테이블의 데이터를 어떻게 연결할 수 있을까..? (예를 들어 어떤 주문을 어떤 고객이 한 것인지 어떻게 알 수 있을까?)
-> 주문 테이블에 고객의 고유한 식별 값(주문 테이블에서의 외래키)을 저장하자

<용어 정리>
Table(=Relation)
Field(=Attribute) - 고유한 데이터 타입 지정
Record(=Row) 
Database(=Schema)
Primary Key - 레코드의 식별자
Foreign Key - 다른 테이블의 레코드를 식별할 수 있는 키, 외래키를 두어 테이블 사이의 관계를 만드는 데 사용

관계형데이터베이스 시스템(RDBMS)
: 관계형 데이터베이스를 관리하는 소프트웨어 프로그램

SQLite 사용할 것임


SQL
: 데이터베이스에 정보를 저장하고 처리하기 위한 프로그래밍 언어
structure query language(구조화된 관계형 데이터베이스에 특정 작업을 요청할 때 사용하는 언어)
지금까지는 장고의 orm을 이용해 파이썬을 통해 sql없이 데이터베이스를 조작할 수 있었다. 


SQL statement
: 4가지 유형으로 구분

(DQL) 
1.SELECT문 : 데이터를 검색하여 출력 
SELECT select_list FROM table_name
-실행순서 :  FROM -> WHERE -> GROUP BY -> HAVING ->  SELECT -> ORDER BY -> LIMIT
=> 테이블에서 특정 조건에 맞는 레코드만 골라서 그룹화 하고 
그룹을 기준으로 특정 조건에 맞는 레코드만 골라서 조회하되, 
기준을 설정하여 정렬하고, 특정 위치의 레코드만을  가져옴 

-filtering 하기
①DISTINCT(중복된 데이터를 제거)
②WHERE(특정 검색 조건을 지정)
③LIKE(값이 특정 패턴과 일치하는지 확인) : '%', '_'사용
-LIMIT&OFFSET(optional) : 몇 개의 레코드를 몇 번째 행부터(몇 개의 행을 건너뛸 것인지) 조회할 것인지 설정 
-비교 연산자, 논리연산자
-그룹화하기 : 집계함수와 함께 사용
GROUP BY(WHERE절 뒤에 사용)

(DDL)
1.CREATE
2.DROP : column삭제 가능 
3.ALTER : ADD COLUMN, RENAME COLUMN, DROP COLUMN, RENAME TO
(DML)
1.INSERT
2.DELETE : record삭제 
3.UPDATE
(DCL)

vscode에서 sqlite3 실습하기 
- CSV파일 가져와서 테이블에 데이터 채우기
$ sqlite3 파일명.sqlite3
sqlite> .mode csv
sqlite> .import superheroes.csv(csv 파일명) superhero(테이블명)


※SQLite 데이터 타입
NULL 
INTEGER
REAL
TEXT(문자열)
BLOB(이미지, 동영상, 문서 등 바이너리 데이터)
※제약조건 예시
PRIMARY KEY
NOT NULL
FOREIGN KEY



 