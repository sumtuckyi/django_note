ORM(Object-Relational-Mapping)
: 객체 지향 프로그래밍 언어를 사용하여 호환되지 않는 유형의 시스템 간에 데이터를 변환하는 기술

QuerySet API
: ORM에서 데이터를 검색, 필터링, 정렬 및 그룹화 하는데 사용하는 도구
-api 구문을 이용하여 SQL이 아닌 python으로 데이터를 처리 

query : django (python object) -> ORM -> Database
response : django (QuerySet or Instance) <- ORM <- Database

Article.objects.all()
-Article : Model class
-objects : Manager
-all() : Queryset API, method

Query
: 데이터베이스에 특정한 데이터를 보여 달라는 요청(from server)
QuerySet
: 데이터베이스에서 전달받은 객체 목록(순회 가능한 데이터->for문 사용)
-Django ORM을 통해 만들어진 자료형
-데이터가 단일한 객체를 반환할 때에는 모델(Class)의 인스턴스로 반환됨

$ pip install ipython
$ pip install django-extensions
project폴더의 settings.py에서 installed_apps에 'django_extensions'를 추가
$ python manage.py shell_plus
shell_plus확장프로그램에서 자동으로 필요한 모듈과 메서드를 import해줌


※Django shell
:Django환경에서 실행되는 python shell

확장프로그램을 사용하는 Django shell에서 실습 진행
<<CREATE>>
★데이터 객체 생성하기 1
-모델 클래스로 인스턴스(article) 만들기 : article = Article()
-> 여기서 생성된 인스턴스(article)은 테이블의 row에 해당함
-클래스 변수(title, content 등)의 값 할당하기 :  article.title = 'first'
-데이터 객체를 저장하기 : article.save()
-데이터 객체 조회하기 :  Article.objects.all()/article.titlea = 
데이터 객체 생성하기 2
article = Article(title='second', content='django??')
데이터 객체 생성하기 3 : 인스턴스 생성 없이 
Article.objects.create(title='third', content='django~')

<<READ>>
-all() : 전체 데이터 조회
-get() : 단일 데이터 조회, pk로 조회하는데 적합한 메서드(객체를 찾을 수 없거나 둘 이상의 객체를 찾으면 예외가 발생하기 때문)
-> 단일 인스턴스를 반환
ex)Article.objects.get(pk=1)
-filter() : 특정 조건을 만족하는 데이터 조회/ 조건을 만족하는 데이터가 없다면 빈 QuerySet을 반환
-> QuerySet을 반환 
ex)Article.objects.filter(content='django!') -> <QuerySet [<Article: Article object (1)>]>

<<UPDATE>>
데이터를 수정하기 위해서는 조회가 먼저 이루어져야 함
article = Article.objects.get(pk=1)
article.save()

<<DELETE>>
article.delete()

Field lookups
특정 레코드에 대한 조건을 설정하는 방법. 주로 조회 시 사용 
-filter(content__contains:'dja'), exclude(), get()등의 키워드 인자로 전달 

실습) all()을 이용하여 메인페이지의 전체 게시글을 출력


<Article: Article object (1)>
<Article: 11/2에 생성된 1번글 - first : django!>


