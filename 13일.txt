DTL
: Template에 조건, 반복, 변수 등의 프로그래밍 기능을 제공하는 시스템
HTML의 컨텐츠를 변수 값에 따라 바꾸고 싶다면? -> DTL사용
-values, filters, tags(반복 또는 논리를 수행하여 제어 흐름을 만듦), comments

템플릿 상속
: 페이지의 공통요소를 포함하는 최상위 템플릿을 정의, 
하위 템플릿이 공통요소를 재정의 할 수 있는 공간을 정의하는
기본 skeleton템플릿을 작성하여 상속 구조를 구축

HTML form(요청과 응답)
사용자가 데이터를 입력하면 받아서 필요한 방식으로 이용하기(저장, 조작, 출력)
HTML form을 이용해 HTTP요청을 서버에 보낸다. 
-form element
: 사용자로부터 입력받은 정보를 서버로 전송
★action속성(form에서 제출된 데이터를 보낼 url, 만약 이 속성을 지정하지 않으면 데이터는 현재 form이 있는 페이지의 url로 보내진다.)
★method속성(데이터를 어떤 방식으로 요청할 지 명시)  
ex) 네이버에서 검색어를 제출하면 https://search.naver.com/search.naver로 데이터가 전송됨
-> 전송된 데이터를 처리한 결과가 출력되는 페이지 : https://search.naver.com/search.naver?query=검색어 
-input element
: 사용자의 데이터를 입력 받을 수 있는 요소
input의 name속성 : 데이터를 제출했을 때, 서버는 name속성 값을 통해(변수명으로 삼아)서만 사용자가 입력한 데이터에 접근할 수 있다.
Query String Parameters
: 사용자가 입력한 데이터를 url주소의 parameter를 이용해 서버로 전달하는 방법

HTTP request
: form을 통해 제출한 데이터를 비롯해 요청과 관련된 모든 데이터다 담겨있는 객체(views.py에 정의된 함수의 첫 번째 인자)

throw & catch 실습 : 사용자가 입력한 데이터 출력해보기
참고) 추가 템플릿 경로 지정


URL dispatcher
: URL 패턴을 정의하고 해당 패턴과 일치하는 요청을 처리할 view함수를 연결(mapping)


variable routing
: URL일부에 변수를 포함시키는 것으로 이때 포함된 변수는 view함수의 인자로 전달될 수 있다.
<path_converter:variable_name>


App URL mapping
: 각 앱에 URL을 정의하는 것으로 프로젝트와 각 앱이 URL을 나누어 관리를 편하게 하기 위함 
url구조 변화 -> include()를 import해서 사용
app별로 url.py파일 생성 후, path()의 세번째 인자로 name를 지정해줌(Naming URL patterns)
-> 각기 다른 앱에서 url에 동일한 이름을 지정해주는 경우가 생길 수 있음 -> 이름뿐만 아니라 key까지 추가해서 구별해주자 
-> key는 app별로 url.py파일 내에서 app_name변수 값을 key로 지정하는 방식으로 할당해준다.  


13일_class
-template을 상속하는 이유 : 중복되는 형식을 처리하기 위해 상속을 이용
-form태그의 query : input태그 속성인 name의 값으로 사용되고 있는데, 서버로 데이터를 보낼 때 key값이 된다.
-GET과 POST의 차이 : GET은 key, value쌍으로 데이터를 처리하기 때문에 POST방식보다 편리하다. 
-app과 url
