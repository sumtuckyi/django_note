백트래킹과 깊이 우선 탐색의 차이
N!가지의 경우의 수를 가진 문제에 대해 깊이 우선탐색을 실시하면 처리 불가능한 문제에서
가지치기를 적용하면 경우의 수가 줄어들어 문제가 해결될 수도 있다.

->백트래킹 과정을 상태공간트리로 시각화할 수 있다. 

트리 자료구조
:사이클이 없는 무향 연결 그래프
-사이클이란 시작노드에서 출발하여 다른 노드를 한 번만 거쳐 다시 시작노드로 돌아올 수 있는 경우를 말한다.
-연결 그래프란 모든 노드가 서로 연결되어 있어 다른 노드를 거치면 도달할 수 있는 경우를 말한다. 
트리는 비선형자료구조이기 때문에 특별한 순회(traversal) 방법이 필요하다.
※비선형 구조 : 원소들 간에 1:n 관계를 가지는 자료구조, 원소들 간에 계층관계를 가지는 계층형 자료구조
 

이진 트리
: 모든 노드의 자식 노드가 2개 이하(0-2개)인 트리
※차수(degree) : 노드에 연결된 자식 노드의 수 
-종류 : 완전이진트리(마지막 레벨을 제외한 모든 레벨의 노드는 2개의 자식노드를 가져야한다 + 마지막 레벨의 노드는 왼쪽부터 채워져야 한다)
-순회방법 : 전위, 중위, 후위 순회
-트리 구현 방법 : 1차원 배열 / 1차원 배열 2개 or 2차원 배열 / 연결리스트(python에서는 class로 구현)
-삽입
-삭제

이진 탐색 트리
: 이진 탐색을 위한 트리 자료구조로 탐색을 위한 전제조건을 만족해야 한다.
-전제 조건 : 루트노드를 기준으로 왼쪽 자식노드는 더 작은 값이, 오른쪽 자식노드는 더 큰 값이 와야 한다. 
-탐색 : 루트에서 탐색 시작(target값 찾기)
-삽입 : 삽입할 원소가 트리에 존재하지 않는 경우에만 삽입(따라서 탐색이 선행됨) -> 탐색이 실패한 위치에서 삽입이 이루어짐 
-삭제 : 삭제할 노드가 리프 노드인 경우(=차수가 0)(탐색->삭제)/ 리프 노드가 아닌 경우(차수가 1인 경우, 탐색->삭제->후속처리/ 차수가 2인 경우, 탐색->후보찾기->이동)
(해당 노드가 삭제되면 그 자리에 올 노드를 찾아야 한다. 
따라서 해당 노드의 서브트리에서 이 자리에 올 수 있는 데이터를 찾아와야 한다.->
왼쪽 서브트리의 가장 오른쪽 자식노드나 오른쪽 서브트리의 가장왼쪽 자식 노드가 후보가 됨)

힙 자료구조
완전 이진 트리 기반
-삽입
-삭제


 
